[{"E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\index.js":"1","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\reportWebVitals.js":"2","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\App.js":"3","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\components\\leftPanel.js":"4","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\components\\editor.js":"5","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\contexts\\mainContext.js":"6","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\components\\folder.js":"7"},{"size":613,"mtime":1610566956887,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":1909,"mtime":1610567627541,"results":"11","hashOfConfig":"9"},{"size":1525,"mtime":1610562596438,"results":"12","hashOfConfig":"9"},{"size":3054,"mtime":1610567608370,"results":"13","hashOfConfig":"9"},{"size":1010,"mtime":1610566589867,"results":"14","hashOfConfig":"9"},{"size":2776,"mtime":1610566383640,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ja36nw",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\index.js",[],["35","36"],"E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\reportWebVitals.js",[],"E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\App.js",["37","38","39"],"import Editor from \"./components/editor\";\nimport LeftPanel from \"./components/leftPanel\";\nimport MainContextProvider, { MainContext } from './contexts/mainContext'\n\nimport \"./App.css\"\n\nimport { Resizable, ResizableBox } from 'react-resizable';\nimport { useContext, useState } from \"react\";\n\n\n\nfunction App() {\n\n  const [baseUrl, setBaseUrl] = useState(null);\n  const [load, setLoad] = useState(false);\n  const [branch, setBranch] = useState(\"master\")\n\n  const [night, setNight] = useState(true)\n\n  const mainContext = useContext(MainContext)\n\n\n\n  return (\n\n    <div className=\"App\">\n      <div className=\"app-header\">\n\n        <input value={baseUrl} onChange={(e) => { setBaseUrl(e.target.value) }} className=\"app-baseurl\" placeholder=\"Public github repo Base url\" />\n\n        <input value={branch} onChange={(e) => { setBranch(e.target.value) }} />\n        <button onClick={() => { setLoad(!load) }}>Go!</button>\n\n        <i class=\"fa fa-moon\" aria-hidden=\"true\"\n          onClick={() => {\n            changeTheme(night);\n            mainContext.setCurrentIDETheme(night ? \"twilight\" : \"tomorrow\")\n            setNight(!night);\n\n          }}\n        ></i>\n\n      </div>\n\n      <div className=\"app-holder\">\n\n        <div className=\"app-lpanel\">\n          <LeftPanel baseUrl={baseUrl} load={load} branch={branch} />\n        </div>\n\n        <div className=\"app-editor\">\n          <Editor />\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\nconst changeTheme = (night) => {\n  if (night) {\n    document.body.style.setProperty(\"--primary\", \"black\");\n    document.body.style.setProperty(\"--secondary\", \"grey\");\n    document.body.style.setProperty(\"--thirdary\", \"rgb(39, 38, 38)\");\n\n  } else {\n    document.body.style.setProperty(\"--primary\", \"white\");\n    document.body.style.setProperty(\"--secondary\", \"black\");\n    document.body.style.setProperty(\"--thirdary\", \"rgb(243, 243, 243)\");\n  }\n}\n","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\components\\leftPanel.js",["40"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { MainContext } from '../contexts/mainContext';\r\n\r\nimport \"../styles/leftpanel.css\"\r\nimport Folder from './folder';\r\n\r\n\r\n\r\nexport default function LeftPanel({ load, baseUrl, branch }) {\r\n\r\n    const [tree, setTree] = useState([])\r\n    const mainContext = useContext(MainContext)\r\n\r\n    const getRoot = () => {\r\n        fetchRootTreeAsync(baseUrl, branch)\r\n            .then(res => {\r\n                if (res.tree) {\r\n                    setTree(res.tree)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                alert(\"Something went wrong:(\")\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!baseUrl) return\r\n        mainContext.clear()\r\n        setTree([])\r\n        getRoot();\r\n    }, [load])\r\n\r\n\r\n    return (\r\n        <div className=\"lp-main\">\r\n            {\r\n                tree.map(node => (\r\n                    <Folder _nodeData={node} />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst fetchRootTreeAsync = async (url, branch = \"master\") => {\r\n    //formate it to api.github....   \r\n    const routes = url.split(\"/\")\r\n    const len = routes.length\r\n    const userName = routes[len - 2]\r\n    const repo = routes[len - 1]\r\n\r\n    const finalUrl = `https://api.github.com/repos/${userName}/${repo}/git/trees/${branch}`\r\n\r\n\r\n\r\n\r\n    const res = await fetch(finalUrl, { method: \"GET\", headers: { 'Content-Type': 'application/json' } }).then(response => response.json())\r\n    return res\r\n}","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\components\\editor.js",["41","42"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { MainContext } from '../contexts/mainContext';\r\nimport \"../styles/editor.css\"\r\n\r\n\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-python\"\r\nimport \"ace-builds/src-noconflict/mode-java\"\r\nimport \"ace-builds/src-noconflict/mode-javascript\"\r\nimport \"ace-builds/src-noconflict/mode-c_cpp\"\r\nimport \"ace-builds/src-noconflict/mode-golang\"\r\nimport \"ace-builds/src-noconflict/mode-yaml\"\r\nimport \"ace-builds/src-noconflict/mode-tsx\"\r\nimport \"ace-builds/src-noconflict/mode-html\"\r\nimport \"ace-builds/src-noconflict/mode-php\"\r\nimport \"ace-builds/src-noconflict/mode-ruby\"\r\nimport \"ace-builds/src-noconflict/mode-rust\"\r\nimport \"ace-builds/src-noconflict/mode-sql\"\r\nimport \"ace-builds/src-noconflict/mode-css\"\r\nimport \"ace-builds/src-noconflict/mode-sass\"\r\nimport \"ace-builds/src-noconflict/mode-markdown\"\r\n\r\n\r\n\r\nimport \"ace-builds/src-noconflict/theme-github\"\r\nimport \"ace-builds/src-noconflict/theme-ambiance\"\r\nimport \"ace-builds/src-noconflict/theme-solarized_dark\"\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/theme-terminal\"\r\nimport \"ace-builds/src-noconflict/theme-tomorrow\"\r\nimport \"ace-builds/src-noconflict/theme-twilight\"\r\n\r\nexport default function Editor() {\r\n\r\n\r\n    const mainContext = useContext(MainContext)\r\n\r\n    const [text, setText] = useState(null)\r\n\r\n    const [mode, setMode] = useState(\"\")\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (!mainContext.currentEditorDataRaw) {\r\n            setText(null)\r\n            return\r\n        }\r\n        const raw = mainContext.currentEditorDataRaw\r\n        let decoded = atob(raw)\r\n\r\n        if (mainContext.currentOpenExtention in { \"png\": 1, \"jpg\": 1 }) {\r\n            decoded = raw\r\n        }\r\n\r\n        setText(decoded)\r\n\r\n        setMode(extentionToMode(mainContext.currentOpenExtention))\r\n\r\n    }, [mainContext.currentEditorDataRaw])\r\n\r\n    if (mainContext.currentOpenExtention in { \"png\": 1, \"jpg\": 1 })\r\n        return (\r\n            <div className=\"ed-main\">\r\n                <img src={\"data:image/png;base64, \" + text}>\r\n\r\n                </img>\r\n            </div>\r\n        )\r\n\r\n    return (\r\n        <div className=\"ed-main\">\r\n            <AceEditor\r\n                mode={mode}\r\n                theme={mainContext.currentIDETheme}\r\n                value={text}\r\n                name=\"UNIQUE_ID_OF_DIV\"\r\n                editorProps={{ $blockScrolling: true }}\r\n                style={{\r\n                    height: '100%',\r\n                    width: '100%'\r\n                }}\r\n                showGutter={true}\r\n                highlightActiveLine={true}\r\n                height={\"100%\"}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst extentionToMode = (ext) => {\r\n    switch (ext) {\r\n        case \"js\":\r\n            return \"javascript\"\r\n        case \"py\":\r\n            return \"python\"\r\n        case \"ts\":\r\n            return \"typescript\"\r\n        case \"md\":\r\n            return \"markdown\"\r\n\r\n\r\n        default:\r\n            return ext\r\n\r\n    }\r\n}","E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\contexts\\mainContext.js",[],"E:\\ALLS\\REACTS\\GITHUB IDEVIEW\\ideview\\src\\components\\folder.js",["43","44","45","46"],"import React, { useContext, useState } from 'react';\r\nimport { MainContext } from '../contexts/mainContext';\r\n\r\n\r\nexport default function Folder({ _nodeData }) {\r\n\r\n    const [nodeData, setNodeData] = useState(_nodeData);\r\n\r\n    const [tree, setTree] = useState([])\r\n\r\n    const mainContext = useContext(MainContext)\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handleExpand = () => {\r\n\r\n        setIsOpen(!isOpen);\r\n        setLoading(true)\r\n        fetchNextTreeAsync(_nodeData.url)\r\n            .then(res => {\r\n                if (res.tree) {\r\n                    setTree(res.tree)\r\n                }\r\n                else if (res.content) {\r\n                    const ext = nodeData.path.split(\".\")[nodeData.path.split(\".\").length - 1]\r\n                    // alert(ext)\r\n                    mainContext.setCurrentOpenExtention(ext)\r\n                    mainContext.setCurrentEditorDataRaw(res.content)\r\n                    mainContext.setCurrentOpenBlob(nodeData)\r\n\r\n                }\r\n                setLoading(false)\r\n            })\r\n            .catch(err => {\r\n                setLoading(false)\r\n                setIsOpen(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"fl-main\">\r\n            <div className=\"fl-title\" onClick={handleExpand}>\r\n\r\n                {getIcon(nodeData, isOpen, mainContext.currentOpenBlob?.sha)}\r\n                <p>{_nodeData.path}</p>\r\n                {\r\n                    loading &&\r\n                    <p className=\"fl-loading\">(loading..)</p>\r\n                }\r\n            </div>\r\n            {\r\n                isOpen &&\r\n                <div className=\"fl-subs\" >\r\n                    {\r\n                        tree.map(node => (\r\n                            <Folder _nodeData={node} />\r\n                        ))\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst fetchNextTreeAsync = async (url) => {\r\n    //formate it to api.github....                                     >>>>>>>>>>>>>>>pending\r\n    const res = await fetch(url, { method: \"GET\", headers: { 'Content-Type': 'application/json' } }).then(response => response.json())\r\n    return res\r\n}\r\n\r\nconst getIcon = (data, isOpen, sha) => {\r\n\r\n    if (data.type == 'tree') {\r\n\r\n        if (isOpen)\r\n            return (<i class=\"fa fa-folder-open\" aria-hidden=\"true\"></i>)\r\n\r\n        return (<i class=\"fa fa-folder\" aria-hidden=\"true\"></i>)\r\n    }\r\n    if (data.type == 'blob') {\r\n\r\n        if (isOpen && sha == data.sha)\r\n            return (<i class=\"fa fa-file\" aria-hidden=\"true\" style={{ color: 'rgb(0, 140, 255)' }}></i>)\r\n\r\n        return (\r\n            <i class=\"fa fa-file\" aria-hidden=\"true\"></i>\r\n        )\r\n    }\r\n}",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":3,"column":8,"nodeType":"53","messageId":"54","endLine":3,"endColumn":27},{"ruleId":"51","severity":1,"message":"55","line":7,"column":10,"nodeType":"53","messageId":"54","endLine":7,"endColumn":19},{"ruleId":"51","severity":1,"message":"56","line":7,"column":21,"nodeType":"53","messageId":"54","endLine":7,"endColumn":33},{"ruleId":"57","severity":1,"message":"58","line":31,"column":8,"nodeType":"59","endLine":31,"endColumn":14,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":62,"column":8,"nodeType":"59","endLine":62,"endColumn":42,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":67,"column":17,"nodeType":"65","endLine":67,"endColumn":61},{"ruleId":"51","severity":1,"message":"66","line":7,"column":22,"nodeType":"53","messageId":"54","endLine":7,"endColumn":33},{"ruleId":"67","severity":1,"message":"68","line":75,"column":19,"nodeType":"69","messageId":"70","endLine":75,"endColumn":21},{"ruleId":"67","severity":1,"message":"68","line":82,"column":19,"nodeType":"69","messageId":"70","endLine":82,"endColumn":21},{"ruleId":"67","severity":1,"message":"68","line":84,"column":27,"nodeType":"69","messageId":"70","endLine":84,"endColumn":29},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'MainContextProvider' is defined but never used.","Identifier","unusedVar","'Resizable' is defined but never used.","'ResizableBox' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'baseUrl', 'getRoot', and 'mainContext'. Either include them or remove the dependency array.","ArrayExpression",["73"],"React Hook useEffect has a missing dependency: 'mainContext.currentOpenExtention'. Either include it or remove the dependency array.",["74"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setNodeData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [baseUrl, getRoot, load, mainContext]",{"range":"79","text":"80"},"Update the dependencies array to be: [mainContext.currentEditorDataRaw, mainContext.currentOpenExtention]",{"range":"81","text":"82"},[796,802],"[baseUrl, getRoot, load, mainContext]",[1891,1925],"[mainContext.currentEditorDataRaw, mainContext.currentOpenExtention]"]